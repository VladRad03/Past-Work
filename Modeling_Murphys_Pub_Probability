import numpy as np
def getWeeklyData(weekIndex):
    i = weekIndex
    #0 = monday
    #6 = sunday
    out = [0]*9
    #returns array containing [genMean, genStd, 
    #    tablegoerMean, tablegoerStd, tablegoerCount, 
    #    bargoerMean, bargoerStd, bargoerCount, samples]
    
    a = [18.105675146771038, 17.859287054409005, 18.267272727272726, 18.028985507246375, 17.647006255585342, 17.144820295983088, 15.51875]
    b = [19.429951690821255, 18.550239234449762, 19.66083916083916, 19.528255528255528, 19.34823977164605, 19.278443113772454, 17.865319865319865]
    c = [1.7479924294684894, 1.6224728927614265, 1.8941530728939389, 1.7631891290012944, 2.8475843371541965, 3.3512470425438776, 3.153301422185153]
    d = [2.588608215162603, 2.452153644571739, 1.9771514141286404, 2.4310314568916387, 3.0669582020189003, 3.7437022742064405, 3.4409167513771752]
    e = [511, 533, 550, 621, 1119, 946, 640]
    f = [414, 418, 286, 407, 1051, 668, 297]
    
    g = [2.2617771542828526, 2.0570129387875222, 2.032437578331225, 2.1797412860771512, 3.075106475814186, 3.6715546162574126, 3.424305899277416]
    #a = print(tableMeans)
    #b = print(barMeans)
    #c = print(tableStds)
    #d = print(barStds)
    #e = print(tableTickets)
    #f = print(barTickets)
    #g = print(genStds)
    
    samples = [11, 11, 10, 12, 12, 10, 10] #numDataSetsPerDayOfWeek

    out[0] = ( a[i] * e[i] + b[i] * f[i] ) / ( e[i] + f[i] )
    out[1] = g[i]
    out[2] = a[i]
    out[3] = c[i]
    out[4] = e[i]
    
    out[5] = b[i]
    out[6] = d[i]
    out[7] = f[i] #I apologize for unreadable code
    
    out[8] = samples[i]
    print(out)
    return out

def normal(power, mean, std, val):
    a = 1/(np.sqrt(2*np.pi)*std)
    diff = np.abs(np.power(val-mean, power))
    b = np.exp(-(diff)/(2*std*std))
    return a*b

def sundayArrivalRate(currentTimeOfDayInHour):
    totalTicketSamples = 937
    totalSamples = 10
    mean = 16.26 #averageTimeTicketOpened
    std = 3.42 #standardDeviationOfTimeOpened
    return (totalTicketSamples / totalSamples) * normal(2, mean, std, currentTimeOfDayInHour)

def arrivalRate(currentTimeOfDayInHour, dayOfWeekIndex, classifierType):
    #classifierType = 0 -> all customers
    #classifierType = 1 -> tableGoers
    #classifierType = 2 -> barGoers
    
    if (classifierType < 0 or classifierType > 2):
        raise Exception("classifier type gotta be 0, 1 or 2")
    
    data = getWeeklyData(dayOfWeekIndex)
    # data containing [genMean 0, genStd 1, 
    #    tablegoerMean 2, tablegoerStd 3, tablegoerCount 4, 
    #    bargoerMean 5, bargoerStd 6, bargoerCount 7, samples 8]
    
    samples = data[8]
    
    if (classifierType == 0): #general
        tickets = data[4] + data[7]
        mean = data[0]
        std = data[1]
    elif (classifierType == 1): #tablers
        tickets = data[4]
        mean = data[2]
        std = data[3]
    else:  #bar
        tickets = data[7]
        mean = data[5]
        std = data[6]
    return (tickets / samples) * normal(2, mean, std, currentTimeOfDayInHour)
    
    
print(sundayArrivalRate(18)) #average sunday hourly ticket opening rate at 6pm
print(arrivalRate(18, 6, 0)) #average sunday hourly ticket opening rate at 6pm
