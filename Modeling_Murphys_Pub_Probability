import numpy as np

"""
Returns an array containing:
[gen_mean, gen_std, tablegoer_mean, tablegoer_std, tablegoer_count,
 bargoer_mean, bargoer_std, bargoer_count, samples]
for a given day of the week (0=Monday, 6=Sunday).
"""
def get_weekly_data(week_index):
    # Data for each day of the week (Monday to Sunday)
    table_means = [18.11, 17.86, 18.27, 18.03, 17.65, 17.14, 15.52]
    bar_means = [19.43, 18.55, 19.66, 19.53, 19.35, 19.28, 17.87]
    table_stds = [1.75, 1.62, 1.89, 1.76, 2.85, 3.35, 3.15]
    bar_stds = [2.59, 2.45, 1.98, 2.43, 3.07, 3.74, 3.44]
    table_tickets = [511, 533, 550, 621, 1119, 946, 640]
    bar_tickets = [414, 418, 286, 407, 1051, 668, 297]
    gen_stds = [2.26, 2.06, 2.03, 2.18, 3.08, 3.67, 3.42]
    samples = [11, 11, 10, 12, 12, 10, 10]  # Number of data sets per day

    i = week_index
    out = [0] * 9

    # General mean (weighted)
    out[0] = (table_means[i] * table_tickets[i] + bar_means[i] * bar_tickets[i]) / (table_tickets[i] + bar_tickets[i])
    out[1] = gen_stds[i]
    out[2] = table_means[i]
    out[3] = table_stds[i]
    out[4] = table_tickets[i]
    out[5] = bar_means[i]
    out[6] = bar_stds[i]
    out[7] = bar_tickets[i]
    out[8] = samples[i]

    return out

def normal(power, mean, std, val):
    a = 1 / (np.sqrt(2 * np.pi) * std)
    diff = np.abs(np.power(val - mean, power))
    b = np.exp(-diff / (2 * std ** 2))
    return a * b

#Returns the estimated hourly arrival rate on Sunday at a given time.
def sunday_arrival_rate(current_hour):
    total_tickets = 937
    total_samples = 10
    mean = 16.26
    std = 3.42
    return (total_tickets / total_samples) * normal(2, mean, std, current_hour)

# Returns the estimated hourly arrival rate for a specific day and customer type.
# classifier: 0=all, 1=table goers, 2=bar goers
def arrival_rate(current_hour, day_of_week, classifier):
    if classifier not in [0, 1, 2]:
        raise ValueError("classifier must be 0 (all), 1 (table goers), or 2 (bar goers)")

    data = get_weekly_data(day_of_week)
    samples = data[8]

    if classifier == 0:
        tickets = data[4] + data[7]
        mean = data[0]
        std = data[1]
    elif classifier == 1:
        tickets = data[4]
        mean = data[2]
        std = data[3]
    else:
        tickets = data[7]
        mean = data[5]
        std = data[6]

    return (tickets / samples) * normal(2, mean, std, current_hour)

# Example usage:
# print(sunday_arrival_rate(18))           # Average Sunday hourly ticket opening rate at 6pm
# print(arrival_rate(18, 6, 0))            # Average Sunday hourly ticket opening rate at 6pm (all customers)
