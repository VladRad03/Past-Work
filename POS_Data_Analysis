import re
import pandas as pd
import matplotlib.pyplot as plt
import requests
from io import StringIO
import base64
import numpy as np
from scipy.stats import norm

#Convert time strings in `col` to float minutes.
def get_ticket_timedelta(df: pd.DataFrame, to_replace: list[str], col: str) -> list[float]:
    for i in to_replace:
        df[col] = df[col].str.replace(i, "")
    timedeltas = []
    for time in df[col]:
        x = str(time).split()
        if len(x) > 1:
            timedeltas.append(60 * float(x[0]) + float(x[1]))
        else:
            timedeltas.append(float(time))
    df[col] = timedeltas
    return timedeltas

#Convert 'Open' and 'Close' columns to numerical hour values.
def convertTimeOpenCloseToNumerical(df: pd.DataFrame):
    for col in ["Open", "Close"]:
        times = list(df[col])
        out = []
        convertTime(times, out)
        df[col] = out

#Convert time strings (e.g., '10:30 am') to numerical hour.
def convertTime(times, out):
    for time in times:
        x = str(time).split()
        ampm = 0
        if len(x) == 2:
            if x[1] == "pm":
                ampm = 12
            hour, *_ = x[0].replace(":", " ").split()
            hour = int(hour)
            if hour == 12:
                ampm = 0 if ampm == 12 else 12
            if 1 <= hour <= 6 and ampm == 0:
                ampm += 24
            out.append(float(hour) + ampm)
        else:
            out.append(-1)

#Print the entire DataFrame.
def print_full(x):
    pd.set_option('display.max_rows', len(x))
    print(x)
    pd.reset_option('display.max_rows')

#Combine multiple CSV files into a single DataFrame.
def createMultiCSVdf(file_paths, infoBool=False) -> pd.DataFrame:
    dataframes = []
    for csv_file in file_paths:
        df = pd.read_csv(csv_file)
        get_ticket_timedelta(df, ["m", "h", "<"], "Time Open")
        convertTimeOpenCloseToNumerical(df)
        df.drop(df.tail(1).index, inplace=True)  # Drop last row
        dataframes.append(df)
    combined_df = pd.concat(dataframes, ignore_index=True)
    for col in ['Tips', 'Net Sales']:
        combined_df[col] = combined_df[col].replace('[\$,]', '', regex=True).astype(float)
    if infoBool:
        print(combined_df.tail())
        print(combined_df.info())
        print(combined_df.describe())
    return combined_df

# Cleans a Murphy's Pub DataFrame in-place.
def convert_df(df: pd.DataFrame):
    get_ticket_timedelta(df, ["m", "h", "<"], "Time Open")
    convertTimeOpenCloseToNumerical(df)
    for col in ['Tips', 'Net Sales']:
        df[col] = df[col].replace('[\$,]', '', regex=True).astype(float)
    df.drop(df.tail(1).index, inplace=True)

#Scatter plot: Tab Open/Close Time vs Net Sales.
def plotdf1(df: pd.DataFrame):
    plt.figure(figsize=(10, 6))
    plt.scatter(df['Open'], df['Net Sales'], label='Open Time')
    plt.scatter(df['Close'], df['Net Sales'], label='Close Time', alpha=0.7)
    plt.xlabel('Tab Time')
    plt.ylabel('Net Sales')
    plt.title('Tab Open/Close Time vs Net Sales')
    plt.legend()
    plt.grid(True)
    plt.show()

#Scatter plot: Time Open vs Net Sales.
def plotdf2(df: pd.DataFrame):
    plt.figure(figsize=(10, 6))
    plt.scatter(df['Time Open'], df['Net Sales'])
    plt.xlabel('Time Open')
    plt.ylabel('Net Sales')
    plt.title('Time Open vs Net Sales')
    plt.grid(True)
    plt.show()

#Download CSV files from a GitHub repo directory and combine into a DataFrame.
def getGitData(path, myToken, owner, repo, branch='main') -> pd.DataFrame:
    url = f'https://api.github.com/repos/{owner}/{repo}/contents/{path}?ref={branch}'
    headers = {'Authorization': f'token {myToken}'}
    response = requests.get(url, headers=headers)
    files = response.json()
    csv_dataframes = []
    for file in files:
        if file['name'].endswith('.csv'):
            content_response = requests.get(file['download_url'])
            data = pd.read_csv(StringIO(content_response.text))
            convert_df(data)
            csv_dataframes.append(data)
    return pd.concat(csv_dataframes, ignore_index=True)

#Returns a list of 30 hour labels from '12AM' to '5AM' (next day).
def timesArray():
    temp = [f"{j}AM" for j in range(12)]
    temp2 = [f"{j}PM" for j in range(12)]
    out = temp + temp2 + temp[:6]
    out[0], out[12], out[24] = '12AM', '12PM', '12AM'
    return out

#Calculates and prints average customer entry rates by hour.
def getRates(df, i, daysOfWeek, numDataSetsPerDayOfWeek):
    numTablers, numBars, numGen = [0]*30, [0]*30, [0]*30
    times = timesArray()
    for j in range(30):
        df1 = df[df['Table Number'].notnull()]
        df2 = df[df['Table Number'].isnull()]
        numTablers[j] = len(df1[df1['Open'] == j]) / numDataSetsPerDayOfWeek[i]
        numBars[j] = len(df2[df2['Open'] == j]) / numDataSetsPerDayOfWeek[i]
        numGen[j] = len(df[df['Open'] == j]) / numDataSetsPerDayOfWeek[i]
    print(f"{daysOfWeek[i]}: ")
    print(numGen[10:26])
    print(numTablers[10:26])
    print(numBars[10:26])
    print()


if __name__ == "__main__":
    # Example placeholders for file paths and data variables
    # Replace with actual file paths and data loading as needed.
    # file_paths = [...]
    # df = createMultiCSVdf(file_paths, infoBool=True)
    return
    
